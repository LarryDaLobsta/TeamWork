// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/ent/message"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
}

// SetMessageUUID sets the "message_uuid" field.
func (mc *MessageCreate) SetMessageUUID(u uuid.UUID) *MessageCreate {
	mc.mutation.SetMessageUUID(u)
	return mc
}

// SetNillableMessageUUID sets the "message_uuid" field if the given value is not nil.
func (mc *MessageCreate) SetNillableMessageUUID(u *uuid.UUID) *MessageCreate {
	if u != nil {
		mc.SetMessageUUID(*u)
	}
	return mc
}

// SetSender sets the "sender" field.
func (mc *MessageCreate) SetSender(s string) *MessageCreate {
	mc.mutation.SetSender(s)
	return mc
}

// SetReceiver sets the "receiver" field.
func (mc *MessageCreate) SetReceiver(s string) *MessageCreate {
	mc.mutation.SetReceiver(s)
	return mc
}

// SetSendDate sets the "send_date" field.
func (mc *MessageCreate) SetSendDate(t time.Time) *MessageCreate {
	mc.mutation.SetSendDate(t)
	return mc
}

// SetNillableSendDate sets the "send_date" field if the given value is not nil.
func (mc *MessageCreate) SetNillableSendDate(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetSendDate(*t)
	}
	return mc
}

// SetReceivedDate sets the "received_date" field.
func (mc *MessageCreate) SetReceivedDate(t time.Time) *MessageCreate {
	mc.mutation.SetReceivedDate(t)
	return mc
}

// SetNillableReceivedDate sets the "received_date" field if the given value is not nil.
func (mc *MessageCreate) SetNillableReceivedDate(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetReceivedDate(*t)
	}
	return mc
}

// SetMessage sets the "message" field.
func (mc *MessageCreate) SetMessage(s []string) *MessageCreate {
	mc.mutation.SetMessage(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MessageCreate) SetID(i int) *MessageCreate {
	mc.mutation.SetID(i)
	return mc
}

// Mutation returns the MessageMutation object of the builder.
func (mc *MessageCreate) Mutation() *MessageMutation {
	return mc.mutation
}

// Save creates the Message in the database.
func (mc *MessageCreate) Save(ctx context.Context) (*Message, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MessageCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MessageCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MessageCreate) defaults() {
	if _, ok := mc.mutation.MessageUUID(); !ok {
		v := message.DefaultMessageUUID()
		mc.mutation.SetMessageUUID(v)
	}
	if _, ok := mc.mutation.SendDate(); !ok {
		v := message.DefaultSendDate()
		mc.mutation.SetSendDate(v)
	}
	if _, ok := mc.mutation.ReceivedDate(); !ok {
		v := message.DefaultReceivedDate()
		mc.mutation.SetReceivedDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MessageCreate) check() error {
	if _, ok := mc.mutation.MessageUUID(); !ok {
		return &ValidationError{Name: "message_uuid", err: errors.New(`ent: missing required field "Message.message_uuid"`)}
	}
	if _, ok := mc.mutation.Sender(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required field "Message.sender"`)}
	}
	if _, ok := mc.mutation.Receiver(); !ok {
		return &ValidationError{Name: "receiver", err: errors.New(`ent: missing required field "Message.receiver"`)}
	}
	if _, ok := mc.mutation.SendDate(); !ok {
		return &ValidationError{Name: "send_date", err: errors.New(`ent: missing required field "Message.send_date"`)}
	}
	if _, ok := mc.mutation.ReceivedDate(); !ok {
		return &ValidationError{Name: "received_date", err: errors.New(`ent: missing required field "Message.received_date"`)}
	}
	return nil
}

func (mc *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(message.Table, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.MessageUUID(); ok {
		_spec.SetField(message.FieldMessageUUID, field.TypeUUID, value)
		_node.MessageUUID = value
	}
	if value, ok := mc.mutation.Sender(); ok {
		_spec.SetField(message.FieldSender, field.TypeString, value)
		_node.Sender = value
	}
	if value, ok := mc.mutation.Receiver(); ok {
		_spec.SetField(message.FieldReceiver, field.TypeString, value)
		_node.Receiver = value
	}
	if value, ok := mc.mutation.SendDate(); ok {
		_spec.SetField(message.FieldSendDate, field.TypeTime, value)
		_node.SendDate = value
	}
	if value, ok := mc.mutation.ReceivedDate(); ok {
		_spec.SetField(message.FieldReceivedDate, field.TypeTime, value)
		_node.ReceivedDate = value
	}
	if value, ok := mc.mutation.Message(); ok {
		_spec.SetField(message.FieldMessage, field.TypeJSON, value)
		_node.Message = value
	}
	return _node, _spec
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	err      error
	builders []*MessageCreate
}

// Save creates the Message entities in the database.
func (mcb *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Message, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MessageCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MessageCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
