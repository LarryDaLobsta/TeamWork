// Code generated by ent, DO NOT EDIT.

package ent

import (
	"hello/ent/message"
	"hello/ent/schema"
	"hello/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	messageFields := schema.Message{}.Fields()
	_ = messageFields
	// messageDescMessageUUID is the schema descriptor for message_uuid field.
	messageDescMessageUUID := messageFields[0].Descriptor()
	// message.DefaultMessageUUID holds the default value on creation for the message_uuid field.
	message.DefaultMessageUUID = messageDescMessageUUID.Default.(func() uuid.UUID)
	// messageDescSendDate is the schema descriptor for send_date field.
	messageDescSendDate := messageFields[4].Descriptor()
	// message.DefaultSendDate holds the default value on creation for the send_date field.
	message.DefaultSendDate = messageDescSendDate.Default.(func() time.Time)
	// messageDescReceivedDate is the schema descriptor for received_date field.
	messageDescReceivedDate := messageFields[5].Descriptor()
	// message.DefaultReceivedDate holds the default value on creation for the received_date field.
	message.DefaultReceivedDate = messageDescReceivedDate.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUserUUID is the schema descriptor for user_uuid field.
	userDescUserUUID := userFields[0].Descriptor()
	// user.DefaultUserUUID holds the default value on creation for the user_uuid field.
	user.DefaultUserUUID = userDescUserUUID.Default.(func() uuid.UUID)
	// userDescUserCreated is the schema descriptor for user_created field.
	userDescUserCreated := userFields[2].Descriptor()
	// user.DefaultUserCreated holds the default value on creation for the user_created field.
	user.DefaultUserCreated = userDescUserCreated.Default.(func() time.Time)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[3].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = func() func(string) error {
		validators := userDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[4].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = func() func(string) error {
		validators := userDescLastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(last_name string) error {
			for _, fn := range fns {
				if err := fn(last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[5].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[6].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
