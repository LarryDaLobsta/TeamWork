// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessageUUID holds the string denoting the message_uuid field in the database.
	FieldMessageUUID = "message_uuid"
	// FieldSender holds the string denoting the sender field in the database.
	FieldSender = "sender"
	// FieldReceiver holds the string denoting the receiver field in the database.
	FieldReceiver = "receiver"
	// FieldSendDate holds the string denoting the send_date field in the database.
	FieldSendDate = "send_date"
	// FieldReceivedDate holds the string denoting the received_date field in the database.
	FieldReceivedDate = "received_date"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// Table holds the table name of the message in the database.
	Table = "messages"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldMessageUUID,
	FieldSender,
	FieldReceiver,
	FieldSendDate,
	FieldReceivedDate,
	FieldMessage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMessageUUID holds the default value on creation for the "message_uuid" field.
	DefaultMessageUUID func() uuid.UUID
	// DefaultSendDate holds the default value on creation for the "send_date" field.
	DefaultSendDate func() time.Time
	// DefaultReceivedDate holds the default value on creation for the "received_date" field.
	DefaultReceivedDate func() time.Time
)

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessageUUID orders the results by the message_uuid field.
func ByMessageUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageUUID, opts...).ToFunc()
}

// BySender orders the results by the sender field.
func BySender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSender, opts...).ToFunc()
}

// ByReceiver orders the results by the receiver field.
func ByReceiver(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiver, opts...).ToFunc()
}

// BySendDate orders the results by the send_date field.
func BySendDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendDate, opts...).ToFunc()
}

// ByReceivedDate orders the results by the received_date field.
func ByReceivedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceivedDate, opts...).ToFunc()
}
