// Code generated by ent, DO NOT EDIT.

package message

import (
	"teamplayer/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// MessageUUID applies equality check predicate on the "message_uuid" field. It's identical to MessageUUIDEQ.
func MessageUUID(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessageUUID, v))
}

// Sender applies equality check predicate on the "sender" field. It's identical to SenderEQ.
func Sender(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSender, v))
}

// Receiver applies equality check predicate on the "receiver" field. It's identical to ReceiverEQ.
func Receiver(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReceiver, v))
}

// SendDate applies equality check predicate on the "send_date" field. It's identical to SendDateEQ.
func SendDate(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendDate, v))
}

// ReceivedDate applies equality check predicate on the "received_date" field. It's identical to ReceivedDateEQ.
func ReceivedDate(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReceivedDate, v))
}

// MessageUUIDEQ applies the EQ predicate on the "message_uuid" field.
func MessageUUIDEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessageUUID, v))
}

// MessageUUIDNEQ applies the NEQ predicate on the "message_uuid" field.
func MessageUUIDNEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMessageUUID, v))
}

// MessageUUIDIn applies the In predicate on the "message_uuid" field.
func MessageUUIDIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMessageUUID, vs...))
}

// MessageUUIDNotIn applies the NotIn predicate on the "message_uuid" field.
func MessageUUIDNotIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMessageUUID, vs...))
}

// MessageUUIDGT applies the GT predicate on the "message_uuid" field.
func MessageUUIDGT(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMessageUUID, v))
}

// MessageUUIDGTE applies the GTE predicate on the "message_uuid" field.
func MessageUUIDGTE(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMessageUUID, v))
}

// MessageUUIDLT applies the LT predicate on the "message_uuid" field.
func MessageUUIDLT(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMessageUUID, v))
}

// MessageUUIDLTE applies the LTE predicate on the "message_uuid" field.
func MessageUUIDLTE(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMessageUUID, v))
}

// SenderEQ applies the EQ predicate on the "sender" field.
func SenderEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSender, v))
}

// SenderNEQ applies the NEQ predicate on the "sender" field.
func SenderNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSender, v))
}

// SenderIn applies the In predicate on the "sender" field.
func SenderIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSender, vs...))
}

// SenderNotIn applies the NotIn predicate on the "sender" field.
func SenderNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSender, vs...))
}

// SenderGT applies the GT predicate on the "sender" field.
func SenderGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSender, v))
}

// SenderGTE applies the GTE predicate on the "sender" field.
func SenderGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSender, v))
}

// SenderLT applies the LT predicate on the "sender" field.
func SenderLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSender, v))
}

// SenderLTE applies the LTE predicate on the "sender" field.
func SenderLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSender, v))
}

// SenderContains applies the Contains predicate on the "sender" field.
func SenderContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldSender, v))
}

// SenderHasPrefix applies the HasPrefix predicate on the "sender" field.
func SenderHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldSender, v))
}

// SenderHasSuffix applies the HasSuffix predicate on the "sender" field.
func SenderHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldSender, v))
}

// SenderEqualFold applies the EqualFold predicate on the "sender" field.
func SenderEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldSender, v))
}

// SenderContainsFold applies the ContainsFold predicate on the "sender" field.
func SenderContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldSender, v))
}

// ReceiverEQ applies the EQ predicate on the "receiver" field.
func ReceiverEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReceiver, v))
}

// ReceiverNEQ applies the NEQ predicate on the "receiver" field.
func ReceiverNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldReceiver, v))
}

// ReceiverIn applies the In predicate on the "receiver" field.
func ReceiverIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldReceiver, vs...))
}

// ReceiverNotIn applies the NotIn predicate on the "receiver" field.
func ReceiverNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldReceiver, vs...))
}

// ReceiverGT applies the GT predicate on the "receiver" field.
func ReceiverGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldReceiver, v))
}

// ReceiverGTE applies the GTE predicate on the "receiver" field.
func ReceiverGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldReceiver, v))
}

// ReceiverLT applies the LT predicate on the "receiver" field.
func ReceiverLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldReceiver, v))
}

// ReceiverLTE applies the LTE predicate on the "receiver" field.
func ReceiverLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldReceiver, v))
}

// ReceiverContains applies the Contains predicate on the "receiver" field.
func ReceiverContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldReceiver, v))
}

// ReceiverHasPrefix applies the HasPrefix predicate on the "receiver" field.
func ReceiverHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldReceiver, v))
}

// ReceiverHasSuffix applies the HasSuffix predicate on the "receiver" field.
func ReceiverHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldReceiver, v))
}

// ReceiverEqualFold applies the EqualFold predicate on the "receiver" field.
func ReceiverEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldReceiver, v))
}

// ReceiverContainsFold applies the ContainsFold predicate on the "receiver" field.
func ReceiverContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldReceiver, v))
}

// SendDateEQ applies the EQ predicate on the "send_date" field.
func SendDateEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendDate, v))
}

// SendDateNEQ applies the NEQ predicate on the "send_date" field.
func SendDateNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSendDate, v))
}

// SendDateIn applies the In predicate on the "send_date" field.
func SendDateIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSendDate, vs...))
}

// SendDateNotIn applies the NotIn predicate on the "send_date" field.
func SendDateNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSendDate, vs...))
}

// SendDateGT applies the GT predicate on the "send_date" field.
func SendDateGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSendDate, v))
}

// SendDateGTE applies the GTE predicate on the "send_date" field.
func SendDateGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSendDate, v))
}

// SendDateLT applies the LT predicate on the "send_date" field.
func SendDateLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSendDate, v))
}

// SendDateLTE applies the LTE predicate on the "send_date" field.
func SendDateLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSendDate, v))
}

// ReceivedDateEQ applies the EQ predicate on the "received_date" field.
func ReceivedDateEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldReceivedDate, v))
}

// ReceivedDateNEQ applies the NEQ predicate on the "received_date" field.
func ReceivedDateNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldReceivedDate, v))
}

// ReceivedDateIn applies the In predicate on the "received_date" field.
func ReceivedDateIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldReceivedDate, vs...))
}

// ReceivedDateNotIn applies the NotIn predicate on the "received_date" field.
func ReceivedDateNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldReceivedDate, vs...))
}

// ReceivedDateGT applies the GT predicate on the "received_date" field.
func ReceivedDateGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldReceivedDate, v))
}

// ReceivedDateGTE applies the GTE predicate on the "received_date" field.
func ReceivedDateGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldReceivedDate, v))
}

// ReceivedDateLT applies the LT predicate on the "received_date" field.
func ReceivedDateLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldReceivedDate, v))
}

// ReceivedDateLTE applies the LTE predicate on the "received_date" field.
func ReceivedDateLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldReceivedDate, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldMessage))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
