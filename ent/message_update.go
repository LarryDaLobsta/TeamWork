// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello/ent/message"
	"hello/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMessageUUID sets the "message_uuid" field.
func (mu *MessageUpdate) SetMessageUUID(u uuid.UUID) *MessageUpdate {
	mu.mutation.SetMessageUUID(u)
	return mu
}

// SetNillableMessageUUID sets the "message_uuid" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableMessageUUID(u *uuid.UUID) *MessageUpdate {
	if u != nil {
		mu.SetMessageUUID(*u)
	}
	return mu
}

// SetSender sets the "sender" field.
func (mu *MessageUpdate) SetSender(s string) *MessageUpdate {
	mu.mutation.SetSender(s)
	return mu
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSender(s *string) *MessageUpdate {
	if s != nil {
		mu.SetSender(*s)
	}
	return mu
}

// SetReceiver sets the "receiver" field.
func (mu *MessageUpdate) SetReceiver(s string) *MessageUpdate {
	mu.mutation.SetReceiver(s)
	return mu
}

// SetNillableReceiver sets the "receiver" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableReceiver(s *string) *MessageUpdate {
	if s != nil {
		mu.SetReceiver(*s)
	}
	return mu
}

// SetSendDate sets the "send_date" field.
func (mu *MessageUpdate) SetSendDate(t time.Time) *MessageUpdate {
	mu.mutation.SetSendDate(t)
	return mu
}

// SetNillableSendDate sets the "send_date" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSendDate(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetSendDate(*t)
	}
	return mu
}

// SetReceivedDate sets the "received_date" field.
func (mu *MessageUpdate) SetReceivedDate(t time.Time) *MessageUpdate {
	mu.mutation.SetReceivedDate(t)
	return mu
}

// SetNillableReceivedDate sets the "received_date" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableReceivedDate(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetReceivedDate(*t)
	}
	return mu
}

// SetMessage sets the "message" field.
func (mu *MessageUpdate) SetMessage(s []string) *MessageUpdate {
	mu.mutation.SetMessage(s)
	return mu
}

// AppendMessage appends s to the "message" field.
func (mu *MessageUpdate) AppendMessage(s []string) *MessageUpdate {
	mu.mutation.AppendMessage(s)
	return mu
}

// ClearMessage clears the value of the "message" field.
func (mu *MessageUpdate) ClearMessage() *MessageUpdate {
	mu.mutation.ClearMessage()
	return mu
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MessageUUID(); ok {
		_spec.SetField(message.FieldMessageUUID, field.TypeUUID, value)
	}
	if value, ok := mu.mutation.Sender(); ok {
		_spec.SetField(message.FieldSender, field.TypeString, value)
	}
	if value, ok := mu.mutation.Receiver(); ok {
		_spec.SetField(message.FieldReceiver, field.TypeString, value)
	}
	if value, ok := mu.mutation.SendDate(); ok {
		_spec.SetField(message.FieldSendDate, field.TypeTime, value)
	}
	if value, ok := mu.mutation.ReceivedDate(); ok {
		_spec.SetField(message.FieldReceivedDate, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Message(); ok {
		_spec.SetField(message.FieldMessage, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedMessage(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, message.FieldMessage, value)
		})
	}
	if mu.mutation.MessageCleared() {
		_spec.ClearField(message.FieldMessage, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetMessageUUID sets the "message_uuid" field.
func (muo *MessageUpdateOne) SetMessageUUID(u uuid.UUID) *MessageUpdateOne {
	muo.mutation.SetMessageUUID(u)
	return muo
}

// SetNillableMessageUUID sets the "message_uuid" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableMessageUUID(u *uuid.UUID) *MessageUpdateOne {
	if u != nil {
		muo.SetMessageUUID(*u)
	}
	return muo
}

// SetSender sets the "sender" field.
func (muo *MessageUpdateOne) SetSender(s string) *MessageUpdateOne {
	muo.mutation.SetSender(s)
	return muo
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSender(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetSender(*s)
	}
	return muo
}

// SetReceiver sets the "receiver" field.
func (muo *MessageUpdateOne) SetReceiver(s string) *MessageUpdateOne {
	muo.mutation.SetReceiver(s)
	return muo
}

// SetNillableReceiver sets the "receiver" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableReceiver(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetReceiver(*s)
	}
	return muo
}

// SetSendDate sets the "send_date" field.
func (muo *MessageUpdateOne) SetSendDate(t time.Time) *MessageUpdateOne {
	muo.mutation.SetSendDate(t)
	return muo
}

// SetNillableSendDate sets the "send_date" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSendDate(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetSendDate(*t)
	}
	return muo
}

// SetReceivedDate sets the "received_date" field.
func (muo *MessageUpdateOne) SetReceivedDate(t time.Time) *MessageUpdateOne {
	muo.mutation.SetReceivedDate(t)
	return muo
}

// SetNillableReceivedDate sets the "received_date" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableReceivedDate(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetReceivedDate(*t)
	}
	return muo
}

// SetMessage sets the "message" field.
func (muo *MessageUpdateOne) SetMessage(s []string) *MessageUpdateOne {
	muo.mutation.SetMessage(s)
	return muo
}

// AppendMessage appends s to the "message" field.
func (muo *MessageUpdateOne) AppendMessage(s []string) *MessageUpdateOne {
	muo.mutation.AppendMessage(s)
	return muo
}

// ClearMessage clears the value of the "message" field.
func (muo *MessageUpdateOne) ClearMessage() *MessageUpdateOne {
	muo.mutation.ClearMessage()
	return muo
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MessageUUID(); ok {
		_spec.SetField(message.FieldMessageUUID, field.TypeUUID, value)
	}
	if value, ok := muo.mutation.Sender(); ok {
		_spec.SetField(message.FieldSender, field.TypeString, value)
	}
	if value, ok := muo.mutation.Receiver(); ok {
		_spec.SetField(message.FieldReceiver, field.TypeString, value)
	}
	if value, ok := muo.mutation.SendDate(); ok {
		_spec.SetField(message.FieldSendDate, field.TypeTime, value)
	}
	if value, ok := muo.mutation.ReceivedDate(); ok {
		_spec.SetField(message.FieldReceivedDate, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Message(); ok {
		_spec.SetField(message.FieldMessage, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedMessage(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, message.FieldMessage, value)
		})
	}
	if muo.mutation.MessageCleared() {
		_spec.ClearField(message.FieldMessage, field.TypeJSON)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
